git clone (URL): To clone a repository, run git clone followed by a space and the repository URL.
Press q: To stop viewing git log output, press q (which stands for quit).
git log: As a reminder, running git log will show a list of the recent commits with information about them, including commit IDs.
To make copying and pasting in GitBash easier by turning on QuickEdit mode, follow the instructions
https://www.udacity.com/wiki/ud775/git-bash-copy-paste
Running git diff followed by two commit IDs will compare the two versions of the code in those commits.
git log --stat : gives statistics on which files have changed
in each commit
git reset --hard : takes out files that were to be tracked
set in the staging area and gets rid of them
git status: checks on the current status of your repository
and lets you know what files aren't being tracked, which ones
are, and which commits are in the staging area.
git init: creates a .git file for a directory and changes
it to a local repository
git add: places the commits you want to make to the repository
in the staging area to be added
git commit: moves commits ready to be committed from the staging area. However, your text editor will open up
and you will have to make a comment, save and then exit the editor
git commit -m "Commit message": You do not have to use your text editor when you run this command
area and commits them officially
Below is a pdf of other git commands:
https://github.com/github/training-kit/blob/master/downloads/github-git-cheat-sheet.pdf
git diff ( with no argument): compares the working area to the staging area
shows any changes that haven't been added to the staging area
git diff --staged : compares the repository and the staging area
Remember that the staging area is a copy of the most recent commits
until there has been changes added from CWD to the staging area
git checkout -b (new branch name): use this command when your in detached head to make the commit a new branch
git show commit_id: This is how you can compare a commit to its parent
git log -n1: shows last commit
git branch: allows a user to get and create local branches in a repository
git branch <branch name>: allows user to create a branch
git remote: allows a user to get and create remote in a repository
git remote <name of remote>: allows a user to create a remote in a repository
git remote add <name of repository> URL location of remote repository
git push <argument 1> <argument 2>: this command takes two arguments and allows a user to make changes to the remote
the arguments are the remote one would like to make changes to and the local branch that the user would like to push
git pull <remote_name> <local_name>: This allows you to update the changes made on the remote to the local
git push -u <remote> <local>
